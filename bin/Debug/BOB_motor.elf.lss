
bin/Debug/BOB_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  000002b2  00000326  2**0
                  ALLOC
  2 .stab         00000f78  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000868  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  9e:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000a6 <__vector_21>:
freenode - JoshAshby
*/
//-------------------------------------------
#include "adc.h"
ISR(ADC_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
}
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <adc_start>:
int adc_start(void)
{
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128 - 125KHz sample rate @ 16MHz
  ce:	aa e7       	ldi	r26, 0x7A	; 122
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	87 60       	ori	r24, 0x07	; 7
  da:	8c 93       	st	X, r24
    ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
  dc:	ac e7       	ldi	r26, 0x7C	; 124
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	ec e7       	ldi	r30, 0x7C	; 124
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	8c 93       	st	X, r24
    ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
  ea:	ac e7       	ldi	r26, 0x7C	; 124
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	ec e7       	ldi	r30, 0x7C	; 124
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 62       	ori	r24, 0x20	; 32
  f6:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADATE);
  f8:	aa e7       	ldi	r26, 0x7A	; 122
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 62       	ori	r24, 0x20	; 32
 104:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADEN);  // Enable ADC
 106:	aa e7       	ldi	r26, 0x7A	; 122
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 68       	ori	r24, 0x80	; 128
 112:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADIE);  // Enable ADC Interrupt
 114:	aa e7       	ldi	r26, 0x7A	; 122
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	8c 93       	st	X, r24
    sei();
 122:	78 94       	sei
    ADCSRA |= (1 << ADSC);  // Start A2D Conversions
 124:	aa e7       	ldi	r26, 0x7A	; 122
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	8c 93       	st	X, r24
    return 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
}
 136:	cf 91       	pop	r28
 138:	df 91       	pop	r29
 13a:	08 95       	ret

0000013c <main>:
#include "pwm.h"
//-------------------------------------------

//-------------------------------------------
int main(void)
{
 13c:	df 93       	push	r29
 13e:	cf 93       	push	r28
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
    pwm_start();
 144:	0e 94 ad 00 	call	0x15a	; 0x15a <pwm_start>
    for(;;){
        pwm(65535, 0, 1);
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	0e 94 db 00 	call	0x1b6	; 0x1b6 <pwm>
 158:	f7 cf       	rjmp	.-18     	; 0x148 <main+0xc>

0000015a <pwm_start>:
    }
return 0;   //  never reached
}
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	e9 e8       	ldi	r30, 0x89	; 137
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	10 82       	st	Z, r1
 168:	a4 e2       	ldi	r26, 0x24	; 36
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	e4 e2       	ldi	r30, 0x24	; 36
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	82 60       	ori	r24, 0x02	; 2
 174:	8c 93       	st	X, r24
 176:	a4 e2       	ldi	r26, 0x24	; 36
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	e4 e2       	ldi	r30, 0x24	; 36
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	84 60       	ori	r24, 0x04	; 4
 182:	8c 93       	st	X, r24
 184:	e0 e8       	ldi	r30, 0x80	; 128
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	81 e8       	ldi	r24, 0x81	; 129
 18a:	80 83       	st	Z, r24
 18c:	e1 e8       	ldi	r30, 0x81	; 129
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 83       	st	Z, r24
 194:	10 92 04 01 	sts	0x0104, r1
 198:	10 92 03 01 	sts	0x0103, r1
 19c:	af e6       	ldi	r26, 0x6F	; 111
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	ef e6       	ldi	r30, 0x6F	; 111
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	8c 93       	st	X, r24
 1aa:	78 94       	sei
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <pwm>:
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <pwm+0x6>
 1bc:	00 d0       	rcall	.+0      	; 0x1be <pwm+0x8>
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <pwm+0xa>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	9a 83       	std	Y+2, r25	; 0x02
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	7c 83       	std	Y+4, r23	; 0x04
 1ca:	6b 83       	std	Y+3, r22	; 0x03
 1cc:	5e 83       	std	Y+6, r21	; 0x06
 1ce:	4d 83       	std	Y+5, r20	; 0x05
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	26 96       	adiw	r28, 0x06	; 6
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	08 95       	ret

000001e6 <__vector_13>:
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
 1fc:	df 93       	push	r29
 1fe:	cf 93       	push	r28
 200:	00 d0       	rcall	.+0      	; 0x202 <__vector_13+0x1c>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	80 91 00 01 	lds	r24, 0x0100
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	3a 83       	std	Y+2, r19	; 0x02
 210:	29 83       	std	Y+1, r18	; 0x01
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	9a 81       	ldd	r25, Y+2	; 0x02
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	31 f0       	breq	.+12     	; 0x226 <__vector_13+0x40>
 21a:	29 81       	ldd	r18, Y+1	; 0x01
 21c:	3a 81       	ldd	r19, Y+2	; 0x02
 21e:	21 30       	cpi	r18, 0x01	; 1
 220:	31 05       	cpc	r19, r1
 222:	c9 f0       	breq	.+50     	; 0x256 <__vector_13+0x70>
 224:	2e c0       	rjmp	.+92     	; 0x282 <__vector_13+0x9c>
 226:	80 91 01 01 	lds	r24, 0x0101
 22a:	90 91 02 01 	lds	r25, 0x0102
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	90 93 02 01 	sts	0x0102, r25
 234:	80 93 01 01 	sts	0x0101, r24
 238:	20 91 01 01 	lds	r18, 0x0101
 23c:	30 91 02 01 	lds	r19, 0x0102
 240:	80 91 03 01 	lds	r24, 0x0103
 244:	90 91 04 01 	lds	r25, 0x0104
 248:	28 17       	cp	r18, r24
 24a:	39 07       	cpc	r19, r25
 24c:	d1 f4       	brne	.+52     	; 0x282 <__vector_13+0x9c>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 00 01 	sts	0x0100, r24
 254:	16 c0       	rjmp	.+44     	; 0x282 <__vector_13+0x9c>
 256:	80 91 01 01 	lds	r24, 0x0101
 25a:	90 91 02 01 	lds	r25, 0x0102
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	90 93 02 01 	sts	0x0102, r25
 264:	80 93 01 01 	sts	0x0101, r24
 268:	20 91 01 01 	lds	r18, 0x0101
 26c:	30 91 02 01 	lds	r19, 0x0102
 270:	80 91 03 01 	lds	r24, 0x0103
 274:	90 91 04 01 	lds	r25, 0x0104
 278:	28 17       	cp	r18, r24
 27a:	39 07       	cpc	r19, r25
 27c:	11 f4       	brne	.+4      	; 0x282 <__vector_13+0x9c>
 27e:	10 92 00 01 	sts	0x0100, r1
 282:	e8 e8       	ldi	r30, 0x88	; 136
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 91 01 01 	lds	r24, 0x0101
 28a:	90 91 02 01 	lds	r25, 0x0102
 28e:	80 83       	st	Z, r24
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	cf 91       	pop	r28
 296:	df 91       	pop	r29
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
